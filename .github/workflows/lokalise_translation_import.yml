# This workflow automates the download of translated files from Lokalise  
# on a scheduled basis (every 5 minutes) or via manual trigger.  
#  
# Key actions:  
# 1. Fetches filtered translations (French, German, Spanish) with statuses:  
#    - Translated  
#    - Reviewed  
#    - Verified  
# 2. Uses the Lokalise API to export JSON files for the specified repository path.  
#  
# Secrets required:  (ORG secrets)
# - LOKALISE_API_TOKEN: Authentication token for API access 

# Variables required: (REPO variables)
# - LOKALISE_PROJECT_ID: Lokalise project identifier  

name: Get latest lokalise translation files

on:
  # allows to manually run the job at any time
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment'
        required: true
        default: 'test-wu3'
        type: choice
        options:
          - test-wu3
      filter_langs:
        description: 'Languages to filter (JSON array)'
        required: true
        default: '["fr","fr_CA","de","es"]'
        type: string
      export_base_lang:
        description: 'Export the base language'
        required: true
        default: true
        type: boolean
      triggers:
        description: 'Triggers array (JSON array)'
        required: true
        default: '["github"]'
        type: choice
        options:
          - '[]'
          - '["github"]'
          - '["azure"]'
  # schedule:
  #   - cron: '*/5 * * * *'

jobs:
  lokalise:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
      LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
      FILTER_LANGS: ${{ github.event.inputs.filter_langs }}
      TRIGGERS: ${{ github.event.inputs.triggers }}

    steps:
      - name: Validate required secrets and environment variables

        run: |
          if [ -z "$LOKALISE_API_TOKEN" ]; then
            echo "LOKALISE_API_TOKEN is not set in organization secrets. For more details read https://google.com" && exit 1
          fi
          echo "LOKALISE_API_TOKEN is set in organization secrets"

          if [ -z "$LOKALISE_PROJECT_ID" ]; then
            echo "LOKALISE_PROJECT_ID is not set in the repository variables. For more details read https://google.com" && exit 1
          fi
          echo "LOKALISE_PROJECT_ID is set in the repository variables : $LOKALISE_PROJECT_ID"

          # Validate key lengths (ensure they have at least one character)
          if [ ${#LOKALISE_API_TOKEN} -lt 1 ]; then
            echo "LOKALISE_API_TOKEN must have at least one character" && exit 1
          fi
          if [ ${#LOKALISE_PROJECT_ID} -lt 1 ]; then
            echo "LOKALISE_PROJECT_ID must have at least one character" && exit 1
          fi

          if [ ${#FILTER_LANGS} -lt 1 ]; then
            echo "FILTER_LANGS must have at least one character" && exit 1
          fi
 
      - name: Export base language
        id: export_base
        if: ${{ github.event.inputs.export_base_lang == 'true' }}
        run: |
          echo "Exporting base language"
          myLangs=[\"en\"]
          myProjectId=${{vars.LOKALISE_PROJECT_ID}}
          echo "myLangs value: $myLangs"
          echo "myProjectId value: $myProjectId"
          echo "https://api.lokalise.com/api2/projects/$myProjectId/files/async-download)"

          JSON_PAYLOAD="{\
            \"format\": \"json\",\
            \"original_filenames\": true,\
            \"filter_langs\": $myLangs,\
            \"directory_prefix\": \"\",\
            \"export_empty_as\": \"empty\",\
            \"export_sort\": \"a_z\",\
            \"indentation\": \"2sp\",\
            \"json_unescaped_slashes\": true,\
            \"replace_breaks\": false,\
            \"triggers\": $TRIGGERS\
          }"

          echo "Curl -d payload: $JSON_PAYLOAD"

          RESPONSE_BODY=$(mktemp)
          HTTP_CODE=$(curl -s -o "$RESPONSE_BODY" -w "%{http_code}" -X POST \
            -H "X-Api-Token: $LOKALISE_API_TOKEN" \
            -H "accept: application/json" \
            -H "content-type: application/json" \
            -d "$JSON_PAYLOAD" \
            "https://api.lokalise.com/api2/projects/$myProjectId/files/async-download")

          echo "HTTP status: $HTTP_CODE"
          echo "Response body:"
          cat "$RESPONSE_BODY"

          # Extract process_id and set as output (GitHub Actions new syntax)
          PROCESS_ID=$(cat "$RESPONSE_BODY" | jq -r '.process_id')
          echo "process_id: $PROCESS_ID"
          echo "lokalise_process_id=$PROCESS_ID" >> $GITHUB_OUTPUT

          if [ "$HTTP_CODE" -ne 200 ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"Lokalise request failed with status code $HTTP_CODE. Response: $(cat $RESPONSE_BODY | head -c 500)\"}" \
              'https://smee.io/HMel3UU8fCNtlx7'
          fi
      
      - name: Export translations
        if: ${{ github.event.inputs.filter_langs != '' && github.event.inputs.filter_langs != '[]' }}
        run: |
          echo "Requesting translations from Lokalise for each language"
          myProjectId=$LOKALISE_PROJECT_ID
          echo "myProjectId value: $myProjectId"

          for lang in $(echo $FILTER_LANGS | jq -r '.[]'); do
            echo "\nProcessing language: $lang"
            JSON_PAYLOAD="{\
              \"format\": \"json\",\
              \"original_filenames\": true,\
              \"filter_langs\": [\"$lang\"],\
              \"directory_prefix\": \"\",\
              \"filter_data\": [\"translated\",\"reviewed\",\"verified\"],\
              \"export_sort\": \"a_z\",\
              \"indentation\": \"2sp\",\
              \"json_unescaped_slashes\": true,\
              \"replace_breaks\": false,\
              \"triggers\": $TRIGGERS\
            }"
            echo "Curl -d payload: $JSON_PAYLOAD"
            RESPONSE_BODY=$(mktemp)
            HTTP_CODE=$(curl -s -o "$RESPONSE_BODY" -w "%{http_code}" -X POST \
              -H "X-Api-Token: $LOKALISE_API_TOKEN" \
              -H "accept: application/json" \
              -H "content-type: application/json" \
              -d "$JSON_PAYLOAD" \
              "https://api.lokalise.com/api2/projects/$myProjectId/files/async-download")
            echo "HTTP status: $HTTP_CODE"
            echo "Response body:"
            cat "$RESPONSE_BODY \n\n"
            if [ "$HTTP_CODE" -ne 200 ]; then
              curl -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"Lokalise request failed for $lang with status code $HTTP_CODE. Response: $(cat $RESPONSE_BODY | head -c 500)\"}" \
                'https://smee.io/HMel3UU8fCNtlx7'
            fi
        shell: bash